#+TITLE: init
#+PROPERTY: header-args :tangle init.el
#+startup: content
* awesome configs for reference
+ james cash ::  [[file:~/repos/james-cash-dotfiles/emacs.d/eshell][file:~/repos/james-cash-dotfiles/emacs.d/eshell]]
+ prot :: [[file:~/repos/prot-dotfiles/emacs/.emacs.d/emacs-init.org]]
+ Doom Emacs
+ Emacs from scratch series :: [[file:~/repos/emacs-from-scratch/Emacs.org]]
* personal info
#+begin_src emacs-lisp
(setq user-full-name "Jigang Li"
      user-mail-address "ljg16654@sjtu.edu.cn")
#+end_src

#+RESULTS:
: Ljg16654@sjtu.edu.cn

* basic
** remove unused UI components
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq use-file-dialog nil)
  (setq use-dialog-box t)               ; only for mouse events
  (setq inhibit-splash-screen t)
#+end_src

#+RESULTS:
: t
** set debug on error and use-package
#+begin_src emacs-lisp
  (setq debug-on-error t)
  ;; (toggle-frame-fullscreen) 
  ;;; custom
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)

  ;;; use-package setup
  (require 'package)

  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** common functionallity
*** copy filename 
From Doom Emacs. Naming is altered to be consistent with Emacs terms
(yank -> save-to-king-ring).
#+begin_src emacs-lisp
(defun +default/save-to-king-ring-buffer-filename ()
  "Copy the current buffer's path to the kill ring."
  (interactive)
  (if-let (filename (or buffer-file-name (bound-and-true-p list-buffers-directory)))
      (message (kill-new (abbreviate-file-name filename)))
    (error "Couldn't find filename in current buffer")))

(global-set-key (kbd "C-c k f")  #'+default/save-to-king-ring-buffer-filename)
#+end_src

#+RESULTS:
: +default/save-to-king-ring-buffer-filename

* editing
** focused editing
#+begin_src emacs-lisp
  (use-package olivetti
    :bind (("C-c f e" . olivetti-mode)))
#+end_src

#+RESULTS:

* theme, font
[[https://stackoverflow.com/questions/21033270/resizing-echoarea-of-emacsclient][related issue on wired space at bottom]]
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "iosevka" :height 135)
#+end_src

#+RESULTS:
: t
#+begin_src emacs-lisp
  (use-package anti-zenburn-theme)
  (use-package spacemacs-theme
    :defer t)
  (load-theme 'modus-vivendi nil)
#+end_src
* window and buffer
** buffer switch

#+begin_src emacs-lisp

  ;; between buffers

  (global-set-key (kbd "s-o") #'ibuffer)
  (global-set-key (kbd "H-a") #'counsel-switch-buffer)
  (global-set-key (kbd "s-O") #'previous-buffer)

  ;; inside a tab

  (setq aw-keys
	(list ?a ?s ?d ?f ?j ?k ?l))
  (global-set-key (kbd "s-j") #'other-window)
  (global-set-key (kbd "s-k") #'(lambda () (interactive)
				  (other-window -1)))
  (global-set-key (kbd "H-s") #'delete-other-windows)

  ;; between tabs

  (global-set-key (kbd "s-n") #'tab-bar-new-tab)
  (global-set-key (kbd "s-N") #'tab-bar-rename-tab)
  (global-set-key (kbd "s-,") #'tab-bar-switch-to-prev-tab)
  (global-set-key (kbd "s-.") #'tab-bar-switch-to-next-tab)
  ;; new tab starts with scratch buffer 
  (setq tab-bar-new-tab-choice "*scratch*")


#+end_src

#+RESULTS:
: *scratch*

** kill buffer
#+begin_src emacs-lisp

  (defun prot-simple-kill-buffer-current (&optional arg)
    "Kill current buffer or abort recursion when in minibuffer.
  With optional prefix ARG (\\[universal-argument]) delete the
  buffer's window as well."
    (interactive "P")
    (if (minibufferp)
        (abort-recursive-edit)
      (kill-buffer (current-buffer)))
    (when (and arg
               (not (one-window-p)))
      (delete-window)))

  (global-set-key (kbd "s-c") #'prot-simple-kill-buffer-current)
  (global-set-key (kbd "s-C") #'(lambda ()
                                  (interactive)
                                  (prot-simple-kill-buffer-current 1)))

#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (prot-simple-kill-buffer-current 1) |

** dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
	  "-AGFhlv --group-directories-first --time-style=long-iso")
    (setq dired-dwim-target t)
    ;; Hooks' syntax is controlled by the `use-pakage-hook-name-suffix'
    ;; variable.  The "-hook" suffix is intentional
    :hook ((dired-mode-hook . dired-hide-details-mode)
	   (dired-mode-hook . hl-line-mode)))
#+end_src

#+RESULTS:
| hl-line-mode | dired-hide-details-mode |
** naming
#+begin_src emacs-lisp

(global-set-key (kbd "C-c b r") #'rename-buffer)

#+end_src

#+RESULTS:
: rename-buffer

* movement
In buffer or across buffers.
** avy and frequently visited files
#+begin_src emacs-lisp

  (use-package avy
    :bind (("M-g g" . avy-goto-line)
           ("H-d" . avy-goto-char-2)))

  (defun langou/goto-config ()
    "go to personal configuration of emacs"
    (interactive)
    (find-file "~/vanilla/init.org"))

  (global-set-key (kbd "C-c f p") #'langou/goto-config)
  (global-set-key (kbd "H-f p") #'langou/goto-config)
#+end_src

#+RESULTS:
: langou/goto-config

** imenu
#+begin_src emacs-lisp
(global-set-key (kbd "M-i") 'imenu)
#+end_src

#+RESULTS:
: imenu

* project
** eyebrowse
|-----------+-----------------------|
| key       | Doom Emacs equivalent |
|-----------+-----------------------|
| C-c C-w c | SPC TAB n             |
| C-c C-w . | ?                     |
| C-c C-w , | SPC TAB r             |
| M-<num>   | M-<num>               |
|-----------+-----------------------|

The shortkeys conflict with org-refile. Since I'm now using EXWM and
considering to use tab-bar-mode for managment of window layout,
tangling is currently disabled.
#+begin_src emacs-lisp :tangle nil
(use-package eyebrowse
  :diminish eyebrowse-mode
  :config (progn
            (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
            (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
            (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
            (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
            (eyebrowse-mode t)
            (setq eyebrowse-new-workspace t)))
#+end_src

#+RESULTS:
: t

** version control
#+begin_src emacs-lisp
(use-package magit
  :bind (("C-c g" . magit) ("H-g" . magit))
)
#+end_src

#+RESULTS:
: magit

** projectile
#+begin_src emacs-lisp
(use-package projectile)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

#+RESULTS:
: projectile-command-map

* completion

** ivy, swiper and counsel

#+begin_src emacs-lisp

(use-package ivy
  :config
  (setq ivy-use-virtual-buffers t
	enable-recursive-minibuffers t)
  :bind (("C-s" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file)))

(ivy-mode 1)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

#+end_src

** prescient.el

#+begin_src emacs-lisp :tangle nil

  (use-package prescient)
  (use-package ivy-prescient
    :after counsel
    :config
    (ivy-prescient-mode 1)
    (prescient-persist-mode 1))


#+end_src

#+RESULTS:
: t

** yasnippet
The snippets are currently stored in DOOMDIR and I may move them to somewhere else later.
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (progn
      (setq yas-snippet-dirs
	     (list "~/.doom.d/snippets"))
      (yas-global-mode)))
#+end_src
#+RESULTS:
: t
** which key
#+begin_src emacs-lisp
  (use-package which-key
    ;; :init (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

#+RESULTS:
: t


enhance ivy with ivy-rich: 
#+begin_src emacs-lisp :tangle nil
  (use-package ivy-rich
    :config (ivy-rich-mode +1))
#+end_src

#+RESULTS:
: t

* org
#+begin_src emacs-lisp
  (use-package org
    :config
    (progn
      (setq org-ellipsis " ▾"
            org-hide-emphasis-markers t)
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))))
#+end_src

#+RESULTS:
: t
** refile
#+begin_src emacs-lisp
  (setq +personal-org-roam-files+ (apply (function append)
				  (mapcar
				   (lambda (directory)
					  (directory-files-recursively directory org-agenda-file-regexp))
				      '("~/org-roam/"))))

  (setq org-refile-targets
	'((nil :maxlevel . 5)
	  (org-agenda-files :maxlevel . 5)
	  (+personal-org-roam-files+ :maxlevel . 5)
	  )
	;; Without this, completers like ivy/helm are only given the first level of
	;; each outline candidates. i.e. all the candidates under the "Tasks" heading
	;; are just "Tasks/". This is unhelpful. We want the full path to each refile
	;; target! e.g. FILE/Tasks/heading/subheading
	org-refile-use-outline-path 'file
	org-outline-path-complete-in-steps nil)
#+end_src

#+RESULTS:

** the todo-keywords cycle
Track state changes.
+ ! :: timestamp 
+ @ :: timestamp with note

#+begin_src emacs-lisp
  (setq org-todo-keywords
	'((sequence "MAYBE(m@)" "TODO(t)" "IN-PROGRESS(i@)" "STUCK(s@/@)" "|" "DONE(d@)" "CANCELLED(c@)")
	  (sequence "REPORT(r)" "BUG(b/@)" "KNOWNCAUSE(k@)" "|" "FIXED(f)")
	  ))
#+end_src

#+RESULTS:
| sequence | MAYBE(m@) | TODO(t)  | IN-PROGRESS(i@) | STUCK(s@/@) |   |          | DONE(d@) | CANCELLED(c@) |
| sequence | REPORT(r) | BUG(b/@) | KNOWNCAUSE(k@)  |             |   | FIXED(f) |          |               |
#+begin_src emacs-lisp
  (setq org-stuck-projects
	;; identify a project with TODO keywords/tags
	;; identify non-stuck state with TODO keywords
	;; identify non-stuck state with tags
	;; regexp match non-stuck projects
	'("-moyu&-MAYBE" ("TODO" "IN-PROGRESS" "BUG" "KNOWNCAUSE") nil ""))
#+end_src

#+RESULTS:
| -moyu&-MAYBE | (TODO IN-PROGRESS BUG KNOWNCAUSE) | nil |   |

** export
#+begin_src emacs-lisp
(setq org-export-with-toc nil)
#+end_src
** babel
*** basic settings

#+begin_src emacs-lisp

(setq org-confirm-babel-evaluate nil)

#+end_src

*** languages

Include languages: 
#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
   (emacs-lisp . t)
   (gnuplot . t)
   (shell . t)
   (java . t)
   (C . t)
   (clojure . t)
   (js . t)
   (ditaa . t)
   (dot . t)
   (org . t)
   (latex . t)
   (haskell . t)
   ))

#+end_src

#+RESULTS:
Set command for python (Ubuntu 20.04 symlinks python to python2.7, so
the default settings calls python2.7).
#+begin_src emacs-lisp

(setq org-babel-python-command "python3")

#+end_src

#+RESULTS:
: python3

#+begin_src python :results output :tangle nil

import sys
print(sys.version)
#+end_src

#+RESULTS:
: 3.8.5 (default, Jul 28 2020, 12:59:40) 
: [GCC 9.3.0]

** appearance

#+begin_src emacs-lisp

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(add-hook 'org-mode-hook #'org-indent-mode)
#+end_src

#+RESULTS:
| org-indent-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | turn-on-org-cdlatex | (lambda nil (org-bullets-mode 1)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** latex
#+begin_src emacs-lisp
(use-package auctex
  :defer t)

(use-package cdlatex
  :hook (org-mode . turn-on-org-cdlatex))
#+end_src

*** TODO rewrite clear cache
#+begin_src emacs-lisp
(defun langou/org-latex-delete-cache () (interactive)
       (delete-directory "~/.emacs.d/.local/cache/org-latex" :RECURSIVE t))
#+end_src

** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :commands org-roam-mode
  :init (add-hook 'after-init-hook 'org-roam-mode)
  :config (setq org-roam-directory "~/org-roam")
  :bind (("C-c r f" . org-roam-find-file)
         ;("H-r f" . org-roam-find-file)
	 ("C-c r c" . org-roam-db-build-cache)
	 ; ("H-r c" . org-roam-db-build-cache)
	 ("C-c r i" . org-roam-insert)
	 ;("H-r i" . org-roam-insert)
	 )
)
#+end_src

#+RESULTS:
: org-roam-insert

#+begin_src emacs-lisp
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src
#+RESULTS:
: t

#+RESULTS:
| ~/org-roam/20201214204228-ros_tf2.org | ~/org-roam/20201214205049-rviz.org | ~/org-roam/20201214205651-realsense_ros_slam.org | ~/org-roam/20201214211147-t265.org | ~/org-roam/20201214222731-realsenseapi.org | ~/org-roam/20201214223854-ros_messages.org | ~/org-roam/20201214224109-slaminjava.org | ~/org-roam/20201215124701-rospy.org | ~/org-roam/20201215132203-ubuntu20_04python.org | ~/org-roam/20201216124143-org_roam.org | ~/org-roam/20201216125059-hightlight_current_line.org | ~/org-roam/20201216125829-org_roam_titles.org | ~/org-roam/20201216131340-org_roam_tags.org | ~/org-roam/20201216134825-org_refile.org | ~/org-roam/20201216143227-org_tag.org | ~/org-roam/20201216152610-dkf.org | ~/org-roam/20201216211516-landmark_measurements.org | ~/org-roam/20201217210551-roscheatsheet.org | ~/org-roam/20201218204707-online_slam.org | ~/org-roam/20201218204931-slam_classification.org | ~/org-roam/20201218205027-full_slam.org | ~/org-roam/20201218212202-ekf_localization.org | ~/org-roam/20201218215300-linear_change_of_gaussian_random_variable.org | ~/org-roam/20201218222748-closure_properties_of_gaussian.org | ~/org-roam/20201218222758-convolution_of_gaussians.org | ~/org-roam/20201218224913-the_correspondence_problem.org | ~/org-roam/20201218224937-maximum_likelihood_correspondence.org | ~/org-roam/20201219104714-sum_of_gaussian_random_variable.org | ~/org-roam/20201219113346-kalman_filter_measurement_update.org | ~/org-roam/20201219114054-second_order_derivative_or_matrix.org | ~/org-roam/20201219124804-full_bayesian_implementation_of_ekf_under_unkown_data_association.org | ~/org-roam/20201219124946-mht.org | ~/org-roam/20201219165336-ekf_slam.org | ~/org-roam/20201222135306-regexp_sentence_end.org | ~/org-roam/20201223191322-uwa_framework.org | ~/org-roam/20201225012254-pyplot_colors.org | ~/org-roam/20201225023227-particle_filter_in_python.org | ~/org-roam/20201226011741-shell_script_array_size.org | ~/org-roam/20201226011850-shell_script_give_command_output_to_an_array.org | ~/org-roam/20201226013739-shell_script_number_of_command_line_arguments.org | ~/org-roam/20201226134132-emacs_tips.org | ~/org-roam/20201226192118-ssh_passphrase.org | ~/org-roam/20201227183820-catkin_build.org | ~/org-roam/20201227190758-catkin_clean.org | ~/org-roam/fastSLAM.org | ~/org-roam/particleFilter.org | ~/org-roam/pointCloudRegistration.org |

** org-capture
[2020-12-24 四] A weired phenomena that I just found is that the
result of using defvar and using string for filename directly is
different!  If I use defvar after =file+headline=, the filename is
understood as a file in the relative path and something like
=~/vanilla/just-for-fun.org= is created (clearly the evaluation
happens in the org file in =~/vanilla=. However, if a string
="just-for-fun.org"= is given instead, Emacs understands it as a file
in my org-directory.

   #+begin_src emacs-lisp
     (defvar +org-capture-journal-file+ "journal.org")
     (defvar +org-capture-todo-file+ "todo.org")
     (defvar +org-capture-notes-file+ "notes.org")
     (defvar +org-capture-just-for-fun-file+ "just-for-fun.org")

     ;;;; org-journal
     (global-set-key (kbd "C-c j") #'(lambda ()
                                       (interactive)
                                       (find-file
                                        (concat org-directory "/journal.org"))))

     (global-set-key (kbd "C-c c") #'org-capture)
     (global-set-key (kbd "H-c") #'org-capture)

     (setq org-capture-templates
             '(("t" "Personal todo" entry
                (file+headline "todo.org" "Inbox")
                "* TODO [%^{Select the urgency|A|B|C}] %?\n%i\n%a\n" :prepend t)

               ("n" "Personal notes" entry
                (file+headline "notes.org" "Inbox")
                "* %U %?\n%i\n%a" :prepend t)

               ("f" "Maybe it would be fun someday..." entry
                (file+headline "just-for-fun.org" "Inbox")
                "* MAYBE %U %?" :prepend t)

               ;; declare root node j
               ("j" "Journal")

               ("ja" "Journal arbitrary recording" entry
                (file+olp+datetree "journal.org")
                "* %?\n%U\n%i" :tree-type week)

               ("jc" "journal clock into something new" entry
                (file+olp+datetree "journal.org")
                "* %?" :clock-in t :clock-keep t :tree-type week)

               ("jn" "journal edit the task currently clocked in" plain
                (clock) "%?" :unnarrowed t)

               ("r" "read later" checkitem
                (file+headline "read-later.org" "Inbox")
                "[ ] %? ")

               ("b" "bug" entry
                (file+headline "bug.org" "Inbox")
                "* BUG %^{header}\n%U\n#+begin_src\n\n%i\n\n#+end_src\n%?")

               ("v" "vocabularies" entry
                (file+headline "voc.org" "Inbox")
                "* %<%Y-%m-%d %H:%M:%S>\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: langou gre\n:END:\n** Front\n%?\n** Back\n\n")))
   #+end_src

   #+RESULTS:
   | t | Personal todo | entry | (file+headline todo.org Inbox) | * TODO [%^{Select the urgency | A | B | C}] %? |
** org-agenda
#+begin_src emacs-lisp
(setq org-agenda-files (apply (function append)
			        (mapcar
			         (lambda (directory)
				        (directory-files-recursively directory org-agenda-file-regexp))
			            '("~/org/"))))
#+end_src

#+RESULTS:
| ~/org/journal/2020-10-25.org | ~/org/journal/2020-10-30.org | ~/org/journal/2020-11-12.org | ~/org/journal/2020-11-13.org | ~/org/journal/2020-11-14.org | ~/org/journal/2020-11-17.org | ~/org/journal/2020-12-20.org | ~/org/bug.org | ~/org/journal.org | ~/org/just-for-fun.org | ~/org/notes.org | ~/org/read-later.org | ~/org/todo.org | ~/org/voc.org |
** habit
#+begin_src emacs-lisp
  (add-to-list 'org-modules 'org-habit)
  (global-set-key (kbd "s-a") #'org-agenda)
#+end_src

#+RESULTS:
: org-agenda

** completion 

#+begin_src emacs-lisp

  (add-to-list 'org-modules 'org-tempo)
  (setq org-structure-template-alist
    '(("a" . "export ascii\n")
      ("c" . "center\n")
      ("C" . "comment\n")
      ("e" . "src elisp\n")
      ("py" . "src python\n")
      ("sh" . "src shell")
      ("E" . "export")
      ("h" . "export html\n")
      ("l" . "export latex\n")
      ("q" . "quote\n")
      ("s" . "src")
      ("v" . "verse\n")))
#+end_src

#+RESULTS:
#+begin_example
((a . export ascii
) (c . center
) (C . comment
) (e . src elisp
) (py . src python
) (sh . src shell) (E . export) (h . export html
) (l . export latex
) (q . quote
) (s . src) (v . verse
))
#+end_example

** misc
*** TODO shortkey conflict 
shortkey of org-mark-ring-goto conflicts with yasnippet.
* miscellaneous 
** default browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox)
#+end_src

#+RESULTS:
: browse-url-firefox

** command-log
  #+begin_src emacs-lisp
  (use-package command-log-mode)
  #+end_src
** ligature
#+begin_src emacs-lisp
    (defconst lisp--prettify-symbols-alist
	'(("lambda"  . ?λ)))

    (add-hook 'lisp-mode-hook #'(lambda () (interactive)
				 (prettify-symbols-mode +1)))


  (setq python-prettify-symbols-alist
	(list
	 '("lambda"  . ?λ)
	 '("**2" . ?²)
	 '("sum" . ?∑)
	 '("sigma" . ?σ)
	 '("mu" . ?μ)
	 '("theta" . ?θ)
	 '("_0" . ?₀)
	 '("_1" . ?₁)
	 '("_2" . ?₂)
	 ))
#+end_src

#+RESULTS:
: ((lambda . 955) (**2 . 178) (sum . 8721) (sigma . 963) (mu . 956) (theta . 952))

** bookmarks
#+begin_src emacs-lisp

(global-set-key (kbd "H-b") #'bookmark-jump)
#+end_src

#+RESULTS:
: bookmark-jump

* lsp
#+begin_src emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0)
    :bind
    (("TAB" . company-indent-or-complete-common)))
  (add-hook 'after-init-hook 'global-company-mode)
  (use-package lsp-mode)
  (use-package flycheck)
  (use-package lsp-ui
    :demand flycheck
    :config
    (setq lsp-ui-sideline-show-diagnostics t
	  lsp-ui-sideline-show-hover t))
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t
		read-process-output-max 1048576)
    :hook (python-mode . (lambda ()
			    (require 'lsp-python-ms)
			    (lsp))))
#+end_src
#+RESULTS:
| lambda | nil | (require 'lsp-python-ms) | (lsp) |

* music
** basic setup
#+begin_src emacs-lisp
  (use-package emms
    :config
    (progn
      (emms-all)
      (emms-default-players)
      (setq emms-source-file-default-directory "~/Music")
      (setq emms-player-mplayer-parameters
	      '("-slave" "-quiet" "-really-quiet" "-novideo"))))

  (global-set-key (kbd "C-c m m") #'emms)
  (global-set-key (kbd "C-c m p") #'emms-add-playlist)
#+end_src

#+RESULTS:
: emms-add-playlist
** TODO improve config
+ block mplayer from poping up
** pdf
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config (pdf-tools-install))
#+end_src

#+RESULTS:
: t
* shell and term
** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :bind (("s-v" . vterm)))
#+end_src

#+RESULTS:
: vterm
** eshell

#+begin_src emacs-lisp

  (global-set-key (kbd "s-E") #'eshell)

  (setenv "PATH"
    (concat
     ;; manually added
     "/usr/local/cbc/bin" ";"
     (getenv "PATH") ; inherited from OS
    )
  )

#+end_src

#+RESULTS:
: /usr/local/cbc/bin;/usr/local/cbc/bin;/home/jigang/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin

[[http://www.howardism.org/Technical/Emacs/eshell-fun.html][eshell pop up window]]

#+begin_src emacs-lisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
  current buffer's file. The eshell is renamed to match that
  directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))

  (global-set-key (kbd "s-e") 'eshell-here)

  (defun eshell/x ()
    (insert "exit")
    (eshell-send-input)
    (delete-window))
#+end_src

#+RESULTS:
: eshell/x


* modeline config
[[https://occasionallycogent.com/custom_emacs_modeline/index.html][A tutorial]]
[[info:emacs#Mode Line][info:emacs#Mode Line]]
[[help:mode-line-format]]
** COMMENT the default
CS:CH-FR BUF  POS LINE (MAJOR MODE)
+ CS :: coding system.
+ ':' :: eol convention. Unix by default (on my XPS15 9500 running
  Linux). One may also choose Mac or DOS.
+ &optional @ :: for emacsclient.
+ CH :: change(?) 
+ '-' :: becomes '@' if the current buffer is on a remote machine.
+ FR :: only appears on text terminals
+ BUFF :: name of buffer.
+ POS :: position in the buffer.
#+begin_src emacs-lisp
  (defun mode-line-format-raw ()
    (interactive)

    (setq mode-line-format
	    '("%e" mode-line-front-space mode-line-mule-info mode-line-client
	      mode-line-modified mode-line-remote
	      mode-line-frame-identification
	      mode-line-buffer-identification " " mode-line-position
	      (vc-mode vc-mode)
	      "  " mode-line-modes mode-line-misc-info mode-line-end-spaces)
  ))
#+end_src

#+begin_src emacs-lisp :tangle nil
  (use-package diminish)
  (diminish 'ivy-mode)
  (diminish 'auto-revert-mode)
  (diminish 'yas-minor-mode)
  (diminish 'org-cdlatex-mode)
  (diminish 'which-key-mode)
  (diminish 'org-roam-mode)
  (diminish 'company-mode)
#+end_src

#+RESULTS:
|   |
#+begin_src emacs-lisp :tangle nil
  (use-package telephone-line
    :config (progn (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
			 telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
			 telephone-line-primary-right-separator 'telephone-line-cubed-right
			 telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right
			 telephone-line-height 24)
		   (telephone-line-mode +1)))
#+end_src

#+RESULTS:
: t
** doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    (progn
      (setq doom-modeline-height 23)))

#+end_src

#+RESULTS:
: t

* languages

#+begin_src emacs-lisp
(global-set-key (kbd "H-r") #'compile)
#+end_src

** lisp-general
#+begin_src emacs-lisp
  (use-package lispy)
  (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
  (add-hook 'racket-mode-hook (lambda () (lispy-mode 1)))
#+end_src

#+RESULTS:
| lambda | nil | (lispy-mode 1) |
** racket
#+begin_src emacs-lisp
(use-package racket-mode)
#+end_src

#+RESULTS:
** cmake
#+begin_src emacs-lisp
  (use-package cmake-mode)
#+end_src

#+RESULTS:

* experimental 
** exwm
*** basic
[[https://github.com/ch11ng/exwm/wiki][exwm wiki]]
#+begin_src emacs-lisp 
  (use-package exwm
    :config
    (progn
      (setq exwm-workspace-number 10)
      (setq exwm-input-prefix-keys
	    '(?\C-x
	      ?\s-j
	      ?\s-C
        ?\s-c
	      ?\s-k
	      ?\s-v
	      ?\s-\,
	      ?\s-\.
        ?\s-n
        ?\s-e
	      ?\C-u
	      ?\C-h
	      ?\M-x
	      ?\M-&
	      ?\M-:
	      ?\H-a
	      ?\H-b
	      ?\H-c
	      ?\H-f
	      ?\H-s
	      ?\C-\ ))
      (setq exwm-input-global-keys
	    `(([?\s-r] . exwm-reset)
	      ([?\s-w] . exwm-workspace-switch)
	      ([?\s-o] . ibuffer)
	      ([?\s-\;] . (lambda (command)
			    (interactive (list (read-shell-command "$ ")))
			    (start-process-shell-command command nil command)))
	      ,@(mapcar (lambda (i)
			  `(,(kbd (format "s-%d" i)) .
			    (lambda ()
			      (interactive)
			      (exwm-workspace-switch-create ,i))))
			(number-sequence 0 9))))
      (exwm-input-set-simulation-keys
       '(([?\C-b] . left)
	 ([?\C-f] . right)
	 ([?\C-p] . up)
	 ([?\C-n] . down)
	 ([?\C-a] . home)
	 ([?\C-e] . end)
	 ))
      (setq exwm-workspace-warp-cursor t
	    mouse-autoselect-window t
	    focus-follows-mouse t)
      (exwm-enable)
      ))

  (display-time-mode)
  (display-battery-mode)

  ;; After C-q, send key to the window 
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
  (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)

#+end_src

#+RESULTS:

#+begin_src emacs-lisp
(require 'exwm-systemtray)
(exwm-systemtray-enable)
#+end_src

#+RESULTS:
| exwm-systemtray--exit |
|                       |
*** workspaces and monitors
Make sure xrandr update refresh EXWM frames.
Assign workspaces to monitors.
#+begin_src emacs-lisp
  (require 'exwm-randr)
  (setq exwm-randr-workspace-monitor-plist '(9 "DP-1-2" 9 "DP-2" 9 "DP-1-1" 9 "DP-1"))
  (exwm-randr-enable)
#+end_src

#+RESULTS:
| exwm-randr--exit | exwm-systemtray--exit |

#+begin_src emacs-lisp
  (defun efs/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun efs/update-displays ()
    (efs/run-in-background "autorandr --change --force")
    (message "Display config: %s"
	     (string-trim (shell-command-to-string "autorandr --current"))))

  (add-hook 'exwm-randr-screen-change-hook #'efs/update-displays)
  (efs/update-displays)

#+end_src
** anki
#+begin_src emacs-lisp
(use-package anki-editor)
#+end_src

#+RESULTS:
